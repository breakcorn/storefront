# Multi-stage Dockerfile для тестирования
FROM node:20-alpine AS base

# Устанавливаем pnpm, git и системные зависимости для Playwright
RUN corepack enable pnpm && \
    corepack install -g pnpm@10.14.0 && \
    apk add --no-cache git wget chromium nss freetype freetype-dev harfbuzz ca-certificates ttf-freefont

# Устанавливаем переменные среды для Playwright
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
ENV PLAYWRIGHT_CHROMIUM_EXECUTABLE_PATH=/usr/bin/chromium-browser

WORKDIR /app

# Stage для установки всех зависимостей включая dev-dependencies
FROM base AS dependencies

# Копируем файлы конфигурации пакетов
COPY package.json pnpm-lock.yaml ./

# Устанавливаем все зависимости включая dev dependencies
RUN pnpm install --frozen-lockfile

# Stage для сборки приложения
FROM dependencies AS build-stage

# Копируем исходный код
COPY . .

# Копируем тестовую конфигурацию среды
COPY .env.test .env

# Генерируем GraphQL типы
RUN pnpm run generate

# Устанавливаем Docker конфигурацию и собираем приложение
RUN cp svelte.config.docker.js svelte.config.js && pnpm run build:test

# Финальный stage для запуска тестов
FROM dependencies AS test

# Копируем собранное приложение (Node адаптер создаёт папку build)
COPY --from=build-stage /app/build ./build/
COPY --from=build-stage /app/.svelte-kit ./.svelte-kit/
COPY --from=build-stage /app/src ./src/
COPY --from=build-stage /app/__tests__ ./__tests__/
COPY --from=build-stage /app/playwright.config.ts ./
COPY --from=build-stage /app/playwright.config.docker.ts ./
COPY --from=build-stage /app/.env.test ./
COPY --from=build-stage /app/package.json ./
COPY --from=build-stage /app/svelte.config.js ./

# Создаем non-root пользователя
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 sveltekit

# Создаем директории для результатов тестов
RUN mkdir -p test-results playwright-report && \
    chown -R sveltekit:nodejs /app

USER sveltekit

# Экспонируем порт
EXPOSE 3000

# Устанавливаем переменные среды
ENV NODE_ENV=test
ENV PORT=3000
ENV CI=true

# Healthcheck для проверки готовности приложения
HEALTHCHECK --interval=10s --timeout=5s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

# Скрипт для запуска приложения и выполнения тестов
CMD ["sh", "-c", "\  
  echo 'Запуск приложения...' && \  
  node build/index.js & \  
  APP_PID=$! && \  
  echo 'Ожидание готовности приложения...' && \  
  for i in \$(seq 1 30); do \  
    if wget --no-verbose --tries=1 --spider http://localhost:3000 2>/dev/null; then \  
      echo 'Приложение готово!'; \  
      break; \  
    fi; \  
    echo -n '.'; \  
    sleep 2; \  
  done && \  
  echo 'Запуск тестов...' && \  
  pnpm test; \  
  TEST_EXIT_CODE=$?; \  
  kill $APP_PID 2>/dev/null || true; \  
  exit $TEST_EXIT_CODE \  
"]
